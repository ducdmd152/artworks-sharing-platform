@page
@model User.Pages.Creator.AudienceSubscriberStatisticModel
@{
    string type = Request.Query["type"];
    if (string.IsNullOrEmpty(type))
    {
        type = "Subscriber";
    }
}
<style>
    .btn.active {
        background-color: #333;
        color: #fff;
    }
</style>
<div class="container mb-4" style="margin-top: 100px;">
    <div class="d-flex justify-content-center">
        <div class="me-4">
            <a href="/Creator/AudienceSubscriberStatistic?type=Subscriber" class="btn position-relative mb-2 @(type == "Subscriber" ? "active" : "")">Subscriber Statistic</a>
        </div>
        <div>
            <a href="/Creator/AudienceSubscriberStatistic?type=Revenue" class="btn position-relative mb-2 @(type == "Revenue" ? "active" : "")">Revenue Statistic</a>
        </div>
    </div>
    
    <select id="timeFrameSelect" class="form-control mb-3">
        <option value="weekly">Weekly</option>
        <option value="monthly">12 Months</option>
    </select>
    <div class="d-flex justify-content-center" style="width:100%; height: 70vh;">
        <canvas id="subscriptionChart"></canvas>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('subscriptionChart').getContext('2d');
    var chart; // This will hold the chart instance

    // Function to create a chart
    function createChart(data, labels) {
        if (chart) {
            chart.destroy(); // If chart instance exists, destroy it before creating a new one
        }
        chart = new Chart(ctx, {
            type: 'line', // or 'bar', 'pie', etc.
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total',
                    data: data,
                    fill: false,
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                
            }
        });
        document.getElementById('subscriptionChart').setAttribute('width', '600');
        document.getElementById('subscriptionChart').setAttribute('height', '400');
    }

    // Function to update the chart data
    function updateChartData(timeFrame) {
        var data = [];
        var labels = [];
        // Use the fetched data from the model
        if (timeFrame === 'weekly') {
            data = [@Model.StatisticOfWeek.Monday, @Model.StatisticOfWeek.Tuesday, @Model.StatisticOfWeek.Wednesday, @Model.StatisticOfWeek.Thursday, @Model.StatisticOfWeek.Friday, @Model.StatisticOfWeek.Saturday, @Model.StatisticOfWeek.Sunday]; // Example data
            labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']; // Example labels
        } else { // 'monthly'
            data = [@Model.StatisticOfYear.January, @Model.StatisticOfYear.February, @Model.StatisticOfYear.March, @Model.StatisticOfYear.April, @Model.StatisticOfYear.May, @Model.StatisticOfYear.June, @Model.StatisticOfYear.July, @Model.StatisticOfYear.August, @Model.StatisticOfYear.September, @Model.StatisticOfYear.October, @Model.StatisticOfYear.November, @Model.StatisticOfYear.December]; // Example data
            labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Example labels
        }
        createChart(data, labels);
    }

    // Initial chart load
    updateChartData('weekly');

    // Event listener for dropdown changes
    document.getElementById('timeFrameSelect').addEventListener('change', function () {
        updateChartData(this.value);
    });
</script>
